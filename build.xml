<?xml version="1.0" encoding="UTF-8"?>
<project name="${project.name}" default="build" basedir=".">
    <property file="build.properties"/>
    <property name="src.dir"     value="${src.dir}"/>
    <property name="classes.dir" value="${classes.dir}"/>
    <property name="dist.dir"    value="${dist.dir}"/>
    <property name="lib.dir"     value="${lib.dir}"/>
    <property name="jar.file"    value="${dist.dir}/${jar.name}"/>


    <!-- 1. compile — компиляция исходных кодов проекта -->
    <target name="compile">
        <echo message=">>> [compile] Compiling sources from ${src.dir} to ${classes.dir}..."/>
        <mkdir dir="${classes.dir}"/>
        <javac srcdir="${src.dir}"
               destdir="${classes.dir}"
               includeantruntime="false"
               encoding="UTF-8"
               fork="false">
            <classpath>
                <fileset dir="${lib.dir}">
                    <include name="**/*.jar"/>
                </fileset>
            </classpath>
        </javac>
    </target>

    <!-- 2. native2ascii — преобразование файлов локализации -->
    <target name="native2ascii">
        <delete dir="${native2ascii.resources}"/>
        <native2ascii src="${resources.dir}"
                      dest="${native2ascii.resources}"
                      includes="**/*.properties"/>
    </target>

    <!-- 3. doc — генерация MD5/SHA1 и javadoc, добавление в MANIFEST.MF -->
    <target name="doc" depends="compile">
        <echo message=">>> [doc] Generating checksums and javadoc..."/>
        <mkdir dir="${build.dir}/checksums"/>
        <checksum todir="${build.dir}/checksums" algorithm="MD5">
            <fileset dir="${classes.dir}">
                <include name="**/*.class"/>
            </fileset>
        </checksum>
        <checksum todir="${build.dir}/checksums" algorithm="SHA-1">
            <fileset dir="${classes.dir}">
                <include name="**/*.class"/>
            </fileset>
        </checksum>
        <mkdir dir="${build.dir}/javadoc"/>
        <javadoc destdir="${build.dir}/javadoc"
                 sourcepath="${src.dir}"
                 packagenames="**">
            <classpath>
                <fileset dir="${lib.dir}">
                    <include name="**/*.jar"/>
                </fileset>
            </classpath>
        </javadoc>
        <manifest file="${build.dir}/generated-manifest.mf">
            <attribute name="Manifest-Version"       value="1.0"/>
            <attribute name="Implementation-Version" value="${version}"/>
            <attribute name="Bundle-MD5"            value="checksums/${jar.name}.md5"/>
            <attribute name="Bundle-SHA1"           value="checksums/${jar.name}.sha1"/>
        </manifest>
    </target>

    <!-- 4. music — воспроизведение музыки по завершению сборки -->
    <target name="music">
        <echo message=">>> [music] Playing build-complete tune..."/>
        <exec executable="${basedir}/scripts/ffplay">
            <arg value="-nodisp"/>
            <arg value="-autoexit"/>
            <arg value="${basedir}/resources/divine-melody.wav"/>
        </exec>
    </target>

    <!-- 5. build — компиляция и упаковка в JAR (зависит от compile, native2ascii, doc, music) -->
    <target name="build" depends="compile, native2ascii, doc, music">
        <echo message=">>> [build] Creating folder ${dist.dir}..."/>
        <mkdir dir="${dist.dir}"/>
        <echo message=">>> [build] Packaging .class files into ${jar.file}..."/>
        <jar destfile="${jar.file}" basedir="${classes.dir}" manifest="${build.dir}/generated-manifest.mf"/>
        <echo message=">>> [build] Done. JAR is at ${jar.file}"/>
        <war destfile="${dist.dir}/${project.name}-${version}.war" webxml="${webapp.dir}/WEB-INF/web.xml">
            <classes dir="${classes.dir}"/>
            <lib dir="${lib.dir}"/>
            <fileset dir="${webapp.dir}">
                <exclude name="WEB-INF/web.xml"/>
            </fileset>
        </war>
        <echo message=">>> [build] WAR is at ${dist.dir}/${project.name}-${version}.war"/>
    </target>

    <!-- 6. clean — удаление скомпилированных классов и временных файлов -->
    <target name="clean">
        <echo message=">>> [clean] Deleting directories ${build.dir} and ${dist.dir}..."/>
        <delete dir="${build.dir}"/>
        <delete dir="${dist.dir}"/>
    </target>

    <!-- 7. test — запуск JUnit-тестов (зависит от build) -->
    <target name="compile-tests">
        <mkdir dir="${build.dir}/test-classes"/>
        <javac srcdir="src/test/java"
               destdir="${build.dir}/test-classes"
               includeantruntime="false"
               encoding="UTF-8">
            <classpath>
                <pathelement path="${classes.dir}"/>
                <fileset dir="${lib.dir}">
                    <include name="**/*.jar"/>
                </fileset>
            </classpath>
        </javac>
    </target>

    <target name="test" depends="compile-tests">
        <echo message=">>> [test] Running JUnit tests..."/>
        <mkdir dir="${build.dir}/test-results"/>
        <junit printsummary="on" haltonfailure="true" fork="true">
            <classpath>
                <pathelement path="${classes.dir}"/>
                <pathelement path="${build.dir}/test-classes"/>
                <fileset dir="${lib.dir}">
                    <include name="**/*.jar"/>
                </fileset>
            </classpath>
            <batchtest todir="${build.dir}/test-results">
                <fileset dir="src/test/java">
                    <include name="**/*Test.java"/>
                </fileset>
            </batchtest>
            <formatter type="plain" usefile="false"/>
            <formatter type="xml"/>
        </junit>
    </target>


    <!-- 8. report — сохранение JUnit-отчёта и commit в Git (зависит от test) -->
    <target name="report" depends="test">
        <echo message=">>> [report] Committing JUnit XML report to Git..."/>
        <exec executable="sh">
            <arg value="-c"/>
            <arg value="git add ${build.dir}/test-results/*.xml || echo '[report] git not found, skipping'"/>
        </exec>
        <exec executable="sh">
            <arg value="-c"/>
            <arg value="git commit -m &quot;Add JUnit test report&quot; || echo '[report] no changes or git not found'"/>
        </exec>
        <echo message=">>> [report] Done."/>
    </target>

    <!-- 9. scp — перемещение собранного JAR на удалённый сервер (зависит от build) -->
    <target name="scp">
        <exec executable="ssh">
            <arg value="-p"/>
            <arg value="${scp.port}"/>
            <arg value="${scp.user}@${scp.host}"/>
            <arg value="rm -rf ${scp.remote.dir}/${jar.name}"/>
        </exec>
        <exec executable="scp">
            <arg value="-P"/>
            <arg value="${scp.port}"/>
            <arg value="${dist.dir}/${jar.name}"/>
            <arg value="${scp.user}@${scp.host}:${scp.remote.dir}"/>
        </exec>
        <exec executable="ssh">
            <arg value="-p"/>
            <arg value="${scp.port}"/>
            <arg value="${scp.user}@${scp.host}"/>
            <arg value="rm -rf ${scp.war.dir}/${project.name}-${version}.war"/>
        </exec>
        <exec executable="scp">
            <arg value="-P"/>
            <arg value="${scp.port}"/>
            <arg value="${dist.dir}/${project.name}-${version}.war"/>
            <arg value="${scp.user}@${scp.host}:${scp.war.dir}"/>
        </exec>
    </target>


    <!-- 10. diff — инициализация локального SVN-репозитория и проверка изменений -->
    <target name="diff">
        <property name="svn.url" value="file:///${basedir}/svnrepo/trunk"/>
        <exec executable="svnadmin" failonerror="false">
            <arg value="create"/>
            <arg value="svnrepo"/>
        </exec>
        <exec executable="svn" failonerror="false">
            <arg value="import"/>
            <arg value="-m"/>
            <arg value="Initial import"/>
            <arg value="src/main/java"/>
            <arg value="${svn.url}"/>
        </exec>
        <exec executable="cmd" failonerror="false">
            <arg value="/c"/>
            <arg value="rmdir /S /Q src\main\java"/>
        </exec>
        <mkdir dir="src/main/java"/>
        <exec executable="svn" failonerror="false">
            <arg value="checkout"/>
            <arg value="${svn.url}"/>
            <arg value="src/main/java"/>
        </exec>
        <exec executable="svn" failonerror="false" outputproperty="svn.status">
            <arg value="status"/>
            <arg value="src/main/java"/>
        </exec>
        <condition property="has.changes">
            <matches string="${svn.status}" pattern="^[AMDR?].*\.java$"/>
        </condition>
        <exec executable="svn" failonerror="false">
            <arg value="commit"/>
            <arg value="-m"/>
            <arg value="Auto-commit by Ant: updating modified Java classes"/>
            <arg value="src/main/java"/>
        </exec>
    </target>

    <!-- 11. history — при ошибке компиляции откат к предыдущей версии из Git -->
    <target name="history">
        <echo message=">>> [history] Attempting compile; if it fails, checkout previous Git revision..."/>
        <exec executable="sh" failonerror="false">
            <arg value="-c"/>
            <arg value="ant compile"/>
        </exec>
        <exec executable="sh" failonerror="false" resultproperty="git.check.ret">
            <arg value="-c"/>
            <arg value="git rev-parse --is-inside-work-tree"/>
        </exec>
        <condition property="git.present">
            <equals arg1="${git.check.ret}" arg2="0"/>
        </condition>
        <condition property="compile.failed">
            <and>
                <not>
                    <available file="${classes.dir}" type="dir"/>
                </not>
                <isset property="git.present"/>
            </and>
        </condition>
        <fail unless="compile.failed"
              message=">>> [history] Compile succeeded or git not found; no rollback."/>
        <echo message=">>> [history] Compile failed; checking out previous revision and retrying..."/>
        <exec executable="sh">
            <arg value="-c"/>
            <arg value="git checkout HEAD~1"/>
        </exec>
        <antcall target="history"/>
    </target>

    <!-- 12. env — сборка и запуск проекта в альтернативных окружениях -->
    <target name="env">
        <echo message=">>> [env] Reading alternative environments..."/>
        <property file="env.properties"/>
        <condition property="env.valid">
            <and>
                <isset property="java.version"/>
                <isset property="jvm.args"/>
            </and>
        </condition>
        <fail unless="env.valid" message="[env] env.properties must define java.version and jvm.args"/>
        <echo message=">>> [env] Using Java home: ${java.version}"/>
        <mkdir dir="${build.dir}/env-classes"/>
        <javac srcdir="${src.dir}"
               destdir="${build.dir}/env-classes"
               includeantruntime="false"
               encoding="UTF-8"
               fork="false">
            <classpath>
                <fileset dir="${lib.dir}">
                    <include name="**/*.jar"/>
                </fileset>
            </classpath>
        </javac>
    </target>
</project>
