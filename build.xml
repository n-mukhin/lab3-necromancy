<?xml version="1.0" encoding="UTF-8"?>
<project name="${project.name}" default="build" basedir=".">
    <property file="build.properties"/>
    <property name="src.dir"     value="${src.dir}"/>
    <property name="classes.dir" value="${classes.dir}"/>
    <property name="dist.dir"    value="${dist.dir}"/>
    <property name="lib.dir"     value="${lib.dir}"/>
    <property name="jar.file"    value="${dist.dir}/${jar.name}"/>

    <!-- 1. compile — компиляция исходных кодов проекта -->
    <target name="compile">
        <echo message=">>> [compile] Compiling sources from ${src.dir} to ${classes.dir}..."/>
        <mkdir dir="${classes.dir}"/>
        <javac srcdir="${src.dir}"
               destdir="${classes.dir}"
               includeantruntime="false"
               encoding="UTF-8"
               fork="true">
            <compilerarg value="-J-Xms128m"/>
            <compilerarg value="-J-Xmx512m"/>
            <classpath>
                <fileset dir="${lib.dir}">
                    <include name="**/*.jar"/>
                </fileset>
            </classpath>
        </javac>
    </target>

    <!-- 2. native2ascii — преобразование файлов локализации -->
    <target name="native2ascii">
        <delete dir="${resources.dir}/native2ascii"/>
        <mkdir dir="${resources.dir}/native2ascii"/>

        <copy todir="${resources.dir}/native2ascii" encoding="UTF-8">
            <fileset dir="${resources.dir}" includes="**/*.properties"/>
            <filterchain>
                <tokenfilter>
                    <native2asciifilter/>
                </tokenfilter>
            </filterchain>
        </copy>
    </target>

    <!-- 3. doc — генерация MD5/SHA1, javadoc и manifest -->
    <target name="doc" depends="compile">
        <echo message=">>> [doc] Generating checksums and javadoc..."/>
        <mkdir dir="${build.dir}/checksums"/>
        <checksum todir="${build.dir}/checksums" algorithm="MD5">
            <fileset dir="${classes.dir}">
                <include name="**/*.class"/>
            </fileset>
        </checksum>
        <checksum todir="${build.dir}/checksums" algorithm="SHA-1">
            <fileset dir="${classes.dir}">
                <include name="**/*.class"/>
            </fileset>
        </checksum>
        <mkdir dir="${build.dir}/javadoc"/>
        <javadoc destdir="${build.dir}/javadoc"
                 sourcepath="${src.dir}"
                 packagenames="**">
            <arg line="-J-Xms128m -J-Xmx512m"/>
            <classpath>
                <fileset dir="${lib.dir}">
                    <include name="**/*.jar"/>
                </fileset>
            </classpath>
        </javadoc>
        <!-- включаем генерацию manifest -->
        <antcall target="generate-manifest"/>
    </target>

    <!-- 4. generate-manifest — создание MANIFEST.MF -->
    <target name="generate-manifest">
        <echo message=">>> [manifest] Generating manifest..."/>
        <mkdir dir="${build.dir}"/>
        <manifest file="${build.dir}/generated-manifest.mf">
            <attribute name="Manifest-Version"       value="1.0"/>
            <attribute name="Implementation-Version" value="${version}"/>
            <attribute name="Bundle-MD5"            value="checksums/${jar.name}.md5"/>
            <attribute name="Bundle-SHA1"           value="checksums/${jar.name}.sha1"/>
        </manifest>
    </target>

    <!-- 5. music — воспроизведение музыки по завершению сборки -->
    <target name="music">
        <echo message=">>> [music] Playing build-complete tune..."/>
        <exec executable="${basedir}/scripts/ffplay">
            <arg value="-nodisp"/>
            <arg value="-autoexit"/>
            <arg value="${basedir}/resources/divine-melody.wav"/>
        </exec>
    </target>

    <!-- 6. build — компиляция и упаковка в JAR (зависит от compile, native2ascii, doc, music) -->
    <target name="build" depends="compile, native2ascii, doc, music">
        <echo message=">>> [build] Creating folder ${dist.dir}..."/>
        <mkdir dir="${dist.dir}"/>
        <echo message=">>> [build] Packaging .class files into ${jar.file} with native jar tool..."/>
        <exec executable="jar">
            <arg value="cf"/>
            <arg value="${jar.file}"/>
            <arg value="-C"/>
            <arg value="${classes.dir}"/>
            <arg value="."/>
        </exec>
        <echo message=">>> [build] Done. JAR is at ${jar.file}"/>
    </target>

    <!-- 8. test — запуск JUnit-тестов (зависит от build) -->
    <target name="compile-tests" depends="compile">
        <mkdir dir="${build.dir}/test-classes"/>
        <javac
                srcdir="src/test/java"
                destdir="${build.dir}/test-classes"
                includeantruntime="false"
                encoding="UTF-8"
                fork="true"
                memoryInitialSize="128m"
                memoryMaximumSize="512m">
            <classpath>
                <pathelement path="${classes.dir}"/>
                <fileset dir="${lib.dir}">
                    <include name="**/*.jar"/>
                </fileset>
            </classpath>
        </javac>
    </target>

    <target name="test" depends="compile-tests">
        <echo message=">>> [test] Running JUnit tests..."/>
        <mkdir dir="${build.dir}/test-results"/>
        <junit printsummary="on" haltonfailure="true" fork="true" maxmemory="512m">
            <classpath>
                <pathelement path="${classes.dir}"/>
                <pathelement path="${build.dir}/test-classes"/>
                <fileset dir="${lib.dir}">
                    <include name="**/*.jar"/>
                </fileset>
            </classpath>
            <batchtest todir="${build.dir}/test-results">
                <fileset dir="src/test/java">
                    <include name="**/*Test.java"/>
                </fileset>
            </batchtest>
            <formatter type="plain" usefile="false"/>
            <formatter type="xml"/>
        </junit>
    </target>

    <!-- 8. report — сохранение JUnit-отчёта и commit в Git (зависит от test) -->
    <target name="report" depends="test">
        <echo message=">>> [report] Generating JUnit XML reports…"/>
        <mkdir dir="${build.dir}/test-results"/>
        <junit printsummary="on" haltonfailure="true" fork="true">
            <jvmarg value="-Xmx512m"/>
            <classpath>
                <pathelement path="${classes.dir}"/>
                <pathelement path="${build.dir}/test-classes"/>
                <fileset dir="${lib.dir}">
                    <include name="**/*.jar"/>
                </fileset>
            </classpath>
            <batchtest todir="${build.dir}/test-results">
                <fileset dir="src/test/java">
                    <include name="**/*Test.java"/>
                </fileset>
            </batchtest>
            <formatter type="plain" usefile="false"/>
            <formatter type="xml"/>
        </junit>
        <echo message=">>> [report] Done."/>
    </target>


</project>
